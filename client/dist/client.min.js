var Autience = null

window.defineAutience = function(autience_callback) {

    var cycle = null,
        lifecycle = null

    var lifecycles = ['displayValidation', 'onPageLoad', 'render', 'postRender', 'display', 'beforeClose', 'close', 'afterClose']

    if (Autience != null) {
        return
    }

    Autience = {
        lifecycle: {},
        utils: {},
        listeners: [],
        emitted: {},
        executors: {},
        lifecycle_executed: false
    }

    lifecycles.forEach(function(l) {

        Autience.lifecycle[l] = [function() {
            //console.log('in ' + l + ' lifecycle')
            return true
        }]
    })



    //simple functions with no dependencies
    Autience.executors.defineUtils = function() {

        //1. Ajax object - shifted to common

        //2b. autience utils sendEvent
        Autience.utils.sendEvent = function(event, data) {
            var now = Math.round(new Date().getTime() / 1000);
            var ten_minutes = 10 * 60
            var created = Autience.utils.nestedValue(Autience, ['setup', 'first_widget_time']);
            var time_gap = now - created

            //logging client events only for 10 minutes after popup creation
            if (created && time_gap > 0 && time_gap < ten_minutes) {
                // console.log('fresh widget, sending event')
                if (Autience.setup && Autience.setup.id) {
                    window.yetience.sendEvent(event, Autience.setup.id, data)
                }
            }
        }

        //3a. emitAutienceEvent
        Autience.utils.emitAutienceEvent = function(eventName, forget) {
            eventName = "autience_" + eventName
                //only emit if this event was not already emitted
            if (!Autience.emitted[eventName]) {
                var event; // The custom event that will be created
                if (document.createEvent) {
                    event = document.createEvent("HTMLEvents");
                    event.initEvent(eventName, true, true);
                } else {
                    event = document.createEventObject();
                    event.eventType = eventName;
                }

                event.eventName = eventName;

                if (document.createEvent) {
                    document.dispatchEvent(event);
                } else {
                    document.fireEvent("on" + event.eventType, event);
                }
                if (eventName == 'autience_load' || eventName == 'autience_exit') {
                    Autience.utils.sendEvent('client_' + eventName + '_triggered')
                }

                //console.log('emitting - '+eventName)
                if (!forget) {
                    //this event can happen only once on the page
                    Autience.emitted[eventName] = true
                }
            }
        }


        //3b. listenAutienceEvent
        Autience.utils.listenAutienceEvent = function(eventName, fn) {
            var autience_event = "autience_" + eventName
            Autience.utils.listen(document, autience_event, fn)
        }

        //3c. delayed Listener
        Autience.utils.delayedListenAutienceEvent = function(autience_event, delay, fn) {
            Autience.listenAutienceEvent(autience_event, function() {
                setTimeout(fn, delay)
            })
        }

        //4. getting document height
        Autience.utils.getDocHeight = function() {
            var D = document
            return Math.max(
                D.body.scrollHeight, D.documentElement.scrollHeight,
                D.body.offsetHeight, D.documentElement.offsetHeight,
                D.body.clientHeight, D.documentElement.clientHeight
            )
        }

        //5. createCookies
        Autience.utils.createCookie = function(name, value, permanent) {
            var cookie = name + "=" + value + ";path=/"
            if (permanent) {

                var expiration_date = new Date();
                expiration_date.setFullYear(expiration_date.getFullYear() + 5);
                cookie = cookie + ";expires=" + expiration_date.toGMTString()
            }
            document.cookie = cookie
        }

        Autience.utils.readCookie = function(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }


        //6. bind function on all elements with the clas
        Autience.utils.executeOnClass = function(class_name, fn) {
            var els = document.getElementsByClassName(class_name)
            if (els) {
                for (var i = 0; i < els.length; i++) {
                    fn(els[i])
                }
            }
        }

        Autience.utils.executeOnId = function(id, fn) {
            var el = document.getElementById(id)
            if (el) {
                fn(el)
            }
        }

        Autience.utils.idListen = function(id, event, fn) {
            Autience.utils.executeOnId(id, function(el) {
                Autience.utils.listen(el, event, fn)
            })
        }


        //7. Listen on elements by class name
        Autience.utils.classListen = function(class_name, evt, fn) {
            Autience.utils.executeOnClass(class_name, function(el) {
                Autience.utils.listen(el, 'click', fn)
            })
        }

        //8. Execute array of functions without input
        Autience.utils.cycle = function(fn_array, widget) {

            if (fn_array) {
                for (var i = 0; i < fn_array.length; i++) {
                    fn_array[i](widget)
                }
            }
        }

        //9. Execute validators in sequence and return true if all are valid
        Autience.utils.checkCycle = function(fn_array, inp) {
            if (fn_array) {
                for (var i = 0; i < fn_array.length; i++) {
                    if (!fn_array[i](inp)) {
                        //console.log('in validateSequence ' + i + ' th function is returning false')
                        return false
                    }
                }
            }
            return true
        }

        //10. get a smart setting value
        Autience.utils.smartSetting = function(extension, key) {
            if (autience_settings && autience_settings.smart && autience_settings.smart[extension]) {
                return autience_settings.smart[extension][key]
            }
        }

        //11. close widget
        Autience.utils.closeWidget = function(widget) {
            Autience.utils.cycle(Autience.lifecycle.close, widget)
            Autience.utils.cycle(Autience.lifecycle.afterClose, widget)
            Autience.utils.sendEvent('popup_closed');
        }

        //12. base64 decoding
        Autience.utils.decode = function(s) {
            if (window.atob) {
                try {
                    var decoded = window.atob(s)
                    return decoded
                } catch (err) {
                    //console.log('Unable to to decode')
                    //console.log(s)
                    return alternateDecode(s)
                }

            }

            function alternateDecode(s) {
                if (!s || s.length == 0) {
                    return ''
                }
                var e = {},
                    i, b = 0,
                    c, x, l = 0,
                    a, r = '',
                    w = String.fromCharCode,
                    L = s.length;
                var A = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                for (i = 0; i < 64; i++) {
                    e[A.charAt(i)] = i;
                }
                for (x = 0; x < L; x++) {
                    c = e[s.charAt(x)];
                    b = (b << 6) + c;
                    l += 6;
                    while (l >= 8) {
                        ((a = (b >>> (l -= 8)) & 0xff) || (x < (L - 2))) && (r += w(a));
                    }
                }
                return r;
            }

        }

        Autience.utils.nestedValue = function(obj, fields) {

            var nested = obj
            for (var i = 0; i < fields.length; i++) {
                nested = nested[fields[i]]

                if (typeof nested == 'undefined') {

                    return null
                }
            }

            return nested
        }

        Autience.utils.stripAndExecuteScript = function(text) {
            var scripts = '';
            var cleaned = text.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, function() {
                scripts += arguments[1] + '\n';
                return '';
            });

            if (window.execScript) {
                window.execScript(scripts);
            } else {
                var head = document.getElementsByTagName('head')[0];
                var scriptElement = document.createElement('script');
                scriptElement.setAttribute('type', 'text/javascript');
                scriptElement.innerText = scripts;
                head.appendChild(scriptElement);
                head.removeChild(scriptElement);
            }
            return cleaned;
        }

        Autience.utils.emitLinkClick = function(url, target, evt) {
            Autience.current_link = url
            Autience.current_target = target

            var host = window.location.host
            var host_without_www = host.replace('www.', '')
            var host_with_www = 'www.' + host

            if (url.indexOf(host) >= 0 || url.indexOf(host_with_www) >= 0 || url.indexOf(host_without_www) >= 0) {
                emitAndDisableRedirect('internal')
            } else {
                emitAndDisableRedirect('external')
            }

            emitAndDisableRedirect('any')

            function emitAndDisableRedirect(type) {
                Autience.utils.emitAutienceEvent('link_' + type, true)
                if (Autience['disable_link_' + type]) {
                    evt.preventDefault()
                }
            }
        }

        Autience.utils.redirect = function(url, target) {
            if (!target) {
                window.location = url
            } else {
                window.open(url, target);
            }
        }

        Autience.utils.isDefined = function(a) {
            return (typeof a != 'undefined')
        }

        Autience.utils.isMobile = function() {
            if (/Mobi/.test(navigator.userAgent)) {
                return true
            }
            return false
        }

        Autience.utils.randomString = function() {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            for (var i = 0; i < 5; i++)
                text += possible.charAt(Math.floor(Math.random() * possible.length));

            return text;
        }

        Autience.utils.hasFeature = function(feature) {
            if (Autience.setup && Autience.setup.package_id != 'default') {
                return true
            }
            
            //All features if premiumSubscription is present
            if (Autience.utils.nestedValue(Autience, ['setup', 'extensions', 'premiumSubscription'])) {
                return true
            }

            if (Autience.utils.nestedValue(Autience, ['setup', 'extensions', feature])) {
                return true
            }

            return false
        }
    }


    //define Listeners for the common events
    Autience.executors.defineListeners = function() {
        //console.log('defining autience listeners')
        Autience.listeners = [{
            target: document,
            trigger: 'scroll',
            reaction: function() {
                var ratio = (window.innerHeight + window.scrollY) / (Autience.utils.getDocHeight());
                var percentage = 25 * Math.floor(ratio * 4.1) //percentage is in multiples of 25
                //console.log('percentage- ' + percentage)
                Autience.utils.emitAutienceEvent('scroll_' + percentage)
            },
            target_name: 'document'
        }, {
            target: document.body,
            trigger: 'mouseout',
            reaction: function(e) {
                e = e ? e : window.event;
                var from = e.relatedTarget || e.toElement;
                if ((!from || from.nodeName == "HTML") && (!e.clientY || (e.clientY <= 0))) {
                    // console.log('exit is triggered')

                    Autience.utils.emitAutienceEvent('exit')
                }
            },
            target_name: 'body'
        }, {
            target: document.getElementsByTagName('a'),
            trigger: 'click',
            reaction: function(evt_obj, evt_name, el) {
                Autience.utils.emitLinkClick(el.href, el.getAttribute('target'), evt_obj)
            },
            target_name: 'links'
        }, {
            target: window,
            trigger: 'hashchange',
            reaction: function(evt_obj, evt_name, el) {
                //alert('in hashchange '+ window.location.hash )
                if (Autience.hash_set) {
                    //emit this event only after a hash has been set in the current cycle
                    Autience.utils.emitAutienceEvent('back')
                }

            },
            target_name: 'window'
        }]
    }



    Autience.executors.bindListeners = function() {
        //iterate through all the listeners and bind them
        //console.log('binding autience listeners')
        var listener = null,
            triggers = null

        Autience.listeners.forEach(function(listener) {

            //if trigger is a string, put the single string in an array
            if (typeof listener.trigger === 'string') {
                triggers = [listener.trigger]
            } else {
                triggers = listener.trigger
            }

            triggers.forEach(function(trigger) {
                if (listener.target.length) {

                    //targets are an array of elements
                    for (var i in listener.target) {

                        Autience.utils.listen(listener.target[i], trigger, listener.reaction)
                    }
                } else {

                    //target is a single element
                    Autience.utils.listen(listener.target, trigger, listener.reaction, listener.target_name)
                }
            })
        })
    }

    Autience.executors.displayWidget = function() {
        Autience.utils.cycle(Autience.lifecycle.display)
    }

    Autience.executors.runWidgetCycle = function(widget) {

        var cycle = Autience.utils.cycle

        if (Autience.utils.checkCycle(lifecycle.displayValidation, widget)) {
            cycle(lifecycle.onPageLoad, widget)

            cycle(lifecycle.render, widget)

            cycle(lifecycle.postRender, widget)
        }
    }

    Autience.executors.runLifecycles = function() {
        //console.log('Starting widget lifecycle')
        if (Autience.lifecycle_executed) {
            //ensure that this function is run only once
            return
        }
        if (window.autience_setup) {
            Autience.lifecycle_executed = true
                //decode and convert setup to json
            Autience.setup = JSON.parse(decodeURIComponent(Autience.utils.decode(autience_setup)))
                // console.log(Autience.setup)
                // console.log('yeloni client is loaded')
            Autience.utils.sendEvent('client_script_loaded')

            Autience.setup.widgets.forEach(function(widget) {
                Autience.executors.runWidgetCycle(widget)
            })
        } else {
            //console.log('window.autience_setup is not defined')
        }
    }

    //execute defineUtils and defineListeners
    //Everything else happens when some event occurs


    lifecycle = Autience.lifecycle


    function assignAutienceListen(callback) {
        //console.log('inside assignAutienceListen')
        if (window.autience_listen) {
            ////console.log('Autience.utils.listen is assigned')
            Autience.utils.listen = window.autience_listen
            if (callback) {
                callback()
            }
        } else {
            setTimeout(function() {
                assignAutienceListen(callback)
            }, 500)
        }
    }

    assignAutienceListen(function() {
        //console.log('in callback of assignAutienceListen')
        Autience.executors.defineUtils()
        Autience.executors.defineListeners()
        Autience.executors.bindListeners()
        if (autience_callback) {
            autience_callback()
        }
    })

};

window.defineAutienceWhen = function(yetience_callback) {
    //log for popup displayed
    Autience.lifecycle.display.push(function(widget) {
        //checking if the popup code is present and sending popup_displayed event
        var code = document.getElementById(widget.code).innerHTML
        if (code) {
            Autience.utils.sendEvent('popup_displayed');
        } else {
            Autience.utils.sendEvent('popup_empty');
        }
    })

    //Zopim related functionality
    Autience.lifecycle.display.push(function(widget) {

        if (Autience.utils.nestedValue(widget, ['components', 'zopimChat']) && typeof $zopim !== 'undefined') {
            $zopim(function() {

                var yel_body_height = window.innerHeight
                var yel_body_width = window.innerWidth
                var yel_zopim_height = 400
                var yel_zopim_width = 310
                var yel_popup_offset = 76

                $zopim.livechat.window.show();
                var yel_loc = document.getElementById("yel-chat-wrapper").getBoundingClientRect();
                //console.log(yel_body_width)
                //console.log(yel_loc.left)
                //console.log(yel_loc.top)

                $zopim.livechat.window.setOffsetHorizontal(yel_body_width - yel_zopim_width - yel_loc.left - 5);
                $zopim.livechat.window.setOffsetVertical((yel_body_height - yel_zopim_height) - yel_popup_offset);

                if (yel_body_width < 767) {
                    $zopim.livechat.window.setOffsetVertical((yel_body_height - yel_zopim_height) - yel_loc.top);
                    $zopim.livechat.window.setOffsetHorizontal((yel_body_width - yel_zopim_width) / 2);
                }

            });
        }
    })

    //attach listener to display when the event occurs
    Autience.lifecycle.onPageLoad.push(function(widget) {

        if (Autience.utils.nestedValue(widget, ['configuration', 'what', 'enable'])) {
            var when = widget.configuration.when

            var is_mobile = Autience.utils.isMobile()
                // console.log('is mobile- ' + is_mobile)
            var different_for_mobiles = when.smallDifferent
            var device = 'large',
                delay = 0


            if (is_mobile && different_for_mobiles) {
                device = 'small'
            }

            var trigger = when[device]
            var autience_event = trigger
            switch (trigger) {
                //handle these trigger cases differently
                case 'scroll':
                    autience_event = 'scroll_' + when.scroll[device]
                    break
                case 'delay':
                    autience_event = 'load'
                    delay = when.delay[device]
                    break
                case 'link':
                    var link_type = when.link[device]
                    autience_event = 'link_' + link_type
                    Autience['disable_link_' + link_type] = true
                    break
            }

            displayPopup(autience_event, delay)
            widget.trigger = {
                trigger: trigger,
                autience_event: autience_event,
                delay: delay
            }

        } else {
            Autience.utils.sendEvent('client_widget_disabled')
            console.log('widget is disabled')
        }

        function displayPopup(autience_event, delay) {

            Autience.utils.listenAutienceEvent(autience_event, function(evt) {
                setTimeout(function() {
                    Autience.utils.cycle(Autience.lifecycle.display, widget)
                        // console.log('Popup is triggered')
                    Autience.utils.sendEvent('popup_triggered')
                }, delay * 1000)

            })
        }

    })

    
    //adding the analytics tracking code to the body
    Autience.lifecycle.display.push(function(widget){
    
        var yel_measure_analytics = widget.components.commonanalytics.values.measureAnalyticsBoolean;
        var yel_tracking_code = widget.components.commonanalytics.values.analyticsTrackingCode;
       
        if(yel_measure_analytics && yel_tracking_code)
        {

            //adding the analytics script
            if(document.body != null)
            {
                var tracking_code_div = document.createElement("script");
                tracking_code_div.type="text/javascript";

                var yel_popup_name = 'Yeloni'
                if(widget.components.commonanalytics.values.analyticsPopupName)
                {
                    var yel_temp_popup_name = widget.components.commonanalytics.values.analyticsPopupName;
                    var yel_popup_name = 'Yeloni-'+yel_temp_popup_name.split(' ').join('-');
                }


                //removing <script> tags
                yel_tracking_code = yel_tracking_code.replace("<script>", " ");
                yel_tracking_code = yel_tracking_code.replace("</script>", " ");

                //removing new lines
                yel_tracking_code = yel_tracking_code.replace(/\n/g, " ");
                //yel_tracking_code = yel_tracking_code.replace("pageview", "Page-Load");

                //adding the code to the script
                tracking_code_div.innerHTML = yel_tracking_code;
     

                document.body.appendChild(tracking_code_div);

                //send the popup display event
                //sending the page load event
                
                ga('send', 'event', yel_popup_name, 'Popup-Display');
            }
        }

    })


    //adding the analytics tracking code and sending pageload event if applicable
    /*Autience.lifecycle.display.push(function(widget){
        var yel_measure_analytics = widget.components.commonanalytics.values.measureAnalyticsBoolean;
        
        if(yel_measure_analytics)
        {
            
            //sending the page load event
            var yel_popup_name = 'Yeloni'
            if(widget.components.commonanalytics.values.analyticsPopupName)
            {
                var yel_temp_popup_name = widget.components.commonanalytics.values.analyticsPopupName;
                var yel_popup_name = 'Yeloni-'+yel_temp_popup_name.split(' ').join('-');
            }

        }
    })*/


    if (yetience_callback) {
        yetience_callback()
    }
};
window.defineAutienceWhere = function(yetience_callback) {
    Autience.lifecycle.displayValidation.push(function(widget) {
        var isMobile = Autience.utils.isMobile()

        if (isMobile && !Autience.utils.hasFeature('mobileScreens')) {
            console.log('Popup is not shown on mobile in lite version')
            return false
        }
        return true
    })

    Autience.lifecycle.displayValidation.push(function(widget) {
        var where = widget.configuration.where
        var cat = null
        var where_categories = widget.configuration.where_categories
        var where_titles = widget.configuration.where_titles



        if (autience_is_home) {
            return where.home
        }

        if (window.autience_page_name == 'checkout') {
            return where.checkout
        }

        switch (where.other) {
            case 'all':
                return true
            case 'none':
                return false
            case 'specific':
                switch (where.specific.selector) {
                    case 'pageType':
                        switch (window.autience_post_type) {
                            case 'post':
                                return where.pageTypes.posts
                            case 'product':
                                return where.pageTypes.products
                            case 'page':
                                return where.pageTypes.pages
                        }
                        break;
                    case 'category':

                        for (var i = 0; i < window.autience_categories.length; i++) {
                            cat = autience_categories[i].cat_ID
                            if (where_categories.indexOf(cat) >= 0 || where_categories.indexOf(cat.toString()) >= 0) {

                                return true
                            }
                        }

                        console.log('returning false')
                        return false
                        break;
                    case 'title':

                        var index = where_titles.indexOf(window.autience_post_id)

                        console.log('title at ' + index)
                        return (index >= 0)
                        break;
                }

        }

        return true
    })



    if (yetience_callback) {
        yetience_callback()
    }
};
window.defineAutienceHow = function(yetience_callback) {
    Autience.lifecycle.display.push(function(widget) {
        //core function which shows the popup
        document.getElementById(widget.code).style.visibility = 'visible'
        widget.default_display = document.getElementById(widget.code).style.display
        document.getElementById(widget.code).style.display = 'block'
    })


    //if analytics is enabled send an popup display event
    Autience.lifecycle.display.push(function(widget) {
        var yel_measure_analytics = widget.components.commonanalytics.values.measureAnalyticsBoolean;
        
        if(yel_measure_analytics)
        {

            var yel_popup_name = 'Yeloni'
            if(widget.components.commonanalytics.values.analyticsPopupName)
            {
                var yel_temp_popup_name = widget.components.commonanalytics.values.analyticsPopupName;
                var yel_popup_name = 'Yeloni-'+yel_temp_popup_name.split(' ').join('-');
            }
            //console.log("Google Script--")
            //console.log(widget.components.commonanalytics.values.analyticsTrackingCode) 
            
            
        }
    })



    //function to add widget rendered into a wrapper div
    Autience.lifecycle.render.push(function(widget) {

        //create a new widget with a wrapper if it does not already exist
        if (!document.getElementById(widget.code)) {
            var widgetDiv = document.createElement('div')

            widgetDiv.style.visibility = 'hidden'
            widgetDiv.id = widget.code
            widgetDiv.className = "yel-popup-main-wrapper"

            var base64_decoded = Autience.utils.decode(widget.rendered)
            if (!base64_decoded || base64_decoded.length == 0) {
                Autience.utils.sendEvent('client_template_empty')
            }
            var inner_html = Autience.utils.stripAndExecuteScript(decodeURIComponent(base64_decoded))
            widgetDiv.innerHTML = inner_html
                //console.log('inner_html')
                //console.log(inner_html)
            widgetDiv.style.background = "url('" + window.yetience.path + "/common/images/opaque-bg.png') top left repeat"


            //console.log(widgetDiv.innerHTML)
            document.body.appendChild(widgetDiv)
        } else {
            console.log('widget with code ' + widget.code + ' already exists')
        }

    })


    Autience.lifecycle.render.push(function(widget) {
        var styles_to_add = decodeURIComponent(Autience.utils.decode(widget.styles))

        //addStyle(styles_to_add)


        var head = document.head || document.getElementsByTagName('head')[0]
        var style = document.createElement('style');

        style.type = 'text/css';
        if (style.styleSheet) {
            style.styleSheet.cssText = styles_to_add;
        } else {
            style.appendChild(document.createTextNode(styles_to_add));
        }

        head.appendChild(style);
    })

    if(yetience_callback){
        yetience_callback()
    }
};
window.defineAutienceWhom = function(yetience_callback) {
    if (Autience) {
        Autience.lifecycle.display.push(function(widget) {
            //create cookies as required
            Autience.utils.createCookie("autience-displayed-visitor-" + widget.code, true, true)
            Autience.utils.createCookie("autience-displayed-session-" + widget.code, true)

        })


        Autience.lifecycle.displayValidation.push(function(widget) {
            if (Autience.utils.nestedValue(widget, ['configuration', 'whom', 'once'])) {
                // console.log('once is ' + widget.configuration.whom.once)
                switch (widget.configuration.whom.once) {
                    case 'visitor':
                        if (Autience.utils.readCookie("autience-displayed-visitor-" + widget.code)) {
                            console.log('visitor cookie exists')
                            return false
                        }
                        break
                    case 'session':
                        if (Autience.utils.readCookie("autience-displayed-session-" + widget.code)) {
                            console.log('session cookie exists')
                            return false
                        }
                        break

                    case 'always':
                        return true
                        break
                }
            }

            return true
        })

        if (yetience_callback) {
            yetience_callback()
        }
    }


};
window.defineAutienceClose = function(yetience_callback) {
    //attach close functionality to the close button
    //close button has an id called autience-close-widget_id
    Autience.lifecycle.postRender.push(function(widget) {

        Autience.utils.classListen('autience-close-' + widget.code, 'click', function(el) {
            Autience.utils.closeWidget(widget)
        })
    })

    Autience.lifecycle.postRender.push(function(widget) {

        Autience.utils.idListen('autience-close-' + widget.code, 'click', function(el) {
            //if the user clicks the close button on a link trigger, check if we need to redirect

            if (Autience.utils.nestedValue(widget, ['trigger', 'trigger']) == 'link' && Autience.utils.nestedValue(widget, ['configuration', 'when', 'link', 'close'])) {
                Autience.utils.redirect(Autience.current_link, Autience.current_target)
            }
        })
    })


    //for close clicking outside
    Autience.lifecycle.postRender.push(function(widget) {
            if (Autience.utils.nestedValue(widget, ['configuration', 'close', 'outside'])) {
                //console.log('close on clicking outside')

                Autience.utils.classListen('yel-popup-main-wrapper', 'click', function() {
                    //console.log('clicked outside')
                    Autience.utils.closeWidget(widget)
                })
                Autience.utils.classListen('yel-popup-template', 'click', function(e) {
                    e.stopPropagation();
                })
            }
    })//close lifecycle


    //adding event listeners for analytics
    Autience.lifecycle.postRender.push(function(widget) {

        var yel_measure_analytics = widget.components.commonanalytics.values.measureAnalyticsBoolean;

        if(yel_measure_analytics)
        {
            
            var yel_popup_name = 'Yeloni'
            if(widget.components.commonanalytics.values.analyticsPopupName)
            {
                var yel_temp_popup_name = widget.components.commonanalytics.values.analyticsPopupName;
                var yel_popup_name = 'Yeloni-'+yel_temp_popup_name.split(' ').join('-');
            }

            //listening for linkedimage clicks
            Autience.utils.classListen('yel-atr-linked-image', 'click', function(el) {
                //send the popup display event
                ga('send', 'event', yel_popup_name, 'Linked-Image-Click');
            });

            //listening for linkedtext clicks
            Autience.utils.classListen('yel-atr-linked-text', 'click', function(el) {
                //send the popup display event
                ga('send', 'event', yel_popup_name, 'Linked-Text-Click');
            });

            //listening for button clicks
            //========do something for yes no buttons
            Autience.utils.classListen('yel-atr-button', 'click', function(el) {
                //send the popup display event
                ga('send', 'event', yel_popup_name, 'Button-Click');
            });
        

        }

    })
        


    Autience.lifecycle.close.push(function(widget) {
        document.getElementById(widget.code).style.visibility = 'hidden'
        if (widget.default_display) {
            document.getElementById(widget.code).style.display = widget.default_display
        }
    })


    //close the zopim window if needed
    Autience.lifecycle.close.push(function(widget) {
        if (typeof $zopim != 'undefined') {
            $zopim.livechat.window.hide();
        }
    })


    //send an analytics event is applicable
    Autience.lifecycle.close.push(function(widget) {
        var yel_measure_analytics = widget.components.commonanalytics.values.measureAnalyticsBoolean;

        if(yel_measure_analytics)
        {
            
            var yel_popup_name = 'Yeloni'
            if(widget.components.commonanalytics.values.analyticsPopupName)
            {
                var yel_temp_popup_name = widget.components.commonanalytics.values.analyticsPopupName;
                var yel_popup_name = 'Yeloni-'+yel_temp_popup_name.split(' ').join('-');
            }

            //send the popup display event
            ga('send', 'event', yel_popup_name, 'Popup-Closed');

        }
    })


    Autience.lifecycle.postRender.push(function(widget) {
        //Show an alertbox before the browser window closes
        //console.log('before close')
        //console.log(widget)

        if (Autience.utils.nestedValue(widget, ['configuration', 'close', 'alert'])) {
            window.onbeforeunload = function(e) {
                return Autience.utils.nestedValue(widget, ['configuration', 'close', 'message'])
            };
        }
    })

    if(yetience_callback){
        yetience_callback()
    }
};
window.defineAutienceEmail = function(yetience_callback) {
    //console.log('injecting email.js')
    if (Autience) {

        email_json = {}
        Autience.lifecycle.postRender.push(function(widget) {

            var name = null,
                email = null,
                name_field_id = 'autience-emailform-name-' + widget.code,
                email_field_id = 'autience-emailform-email-' + widget.code,
                email_error_id = 'autience-emailform-email-error-' + widget.code,
                name_error_id = 'autience-emailform-name-error-' + widget.code,
                submit_field_id = 'autience-emailform-submit-' + widget.code

            var values = Autience.utils.nestedValue(widget, ['components', 'emailSubscription', 'values'])
            if (!values) {
                return
            }
            // console.log(widget)
            if (widget.components.emailSubscription) {

                Autience.utils.idListen(submit_field_id, 'click', function() {
                    //console.log("submit clicked")
                    var previous_submit_text = document.getElementById(submit_field_id).innerHTML
                    document.getElementById(submit_field_id).innerHTML = "Hold on.."

                    name = document.getElementById(name_field_id).value
                    if (!validateName(name)) {
                        //console.log("Invalid name"+name_error_id)
                        document.getElementById(name_error_id).innerHTML = 'Invalid Name'
                        document.getElementById(name_error_id).style.display = 'block'
                        document.getElementById(submit_field_id).innerHTML = previous_submit_text
                        return;
                    } else {
                        document.getElementById(name_error_id).style.display = 'none'
                    }


                    email = document.getElementById(email_field_id).value
                    if (!validateEmail(email)) {
                        //console.log("Invalid email")
                        document.getElementById(email_error_id).innerHTML = 'Invalid Email'
                        document.getElementById(email_error_id).style.display = 'block'
                        document.getElementById(submit_field_id).innerHTML = previous_submit_text
                        return;
                    } else {
                        document.getElementById(email_error_id).style.display = 'none'
                    }


                    var provider = widget.components.emailSubscription.values.provider
                    var list = widget.components.emailSubscription.values.list
                    var verify = widget.components.emailSubscription.values.verify



                    //creating a variable
                    var autience_user_details = {
                        "email": email,
                        "name": name,
                        "website_id": Autience.setup.id,
                        "provider": provider,
                        "list": list,
                        "verify": verify
                    }


                    Autience.utils.sendEvent('new_email_subscribed', autience_user_details);
                    //console.log("back from sendEvent")

                    var autience_subscription_url = yetience.server + '/api/EmailSubscriptions/new_subscription';
                    console.log(autience_subscription_url)


                    //display if premium thankyou page is found or not
                    if (widget.components.emailSubscription.values.thankyou != 'yeloni') {
                        console.log('premium thankyou page found')
                    } else {
                        console.log('default thankyou page')
                    }

                    //function(url, method, data, success, failure)
                    window.yetience.ajax(autience_subscription_url, 'POST', autience_user_details,
                        function(status_response) {
                            //success
                            console.log('email response')
                            console.log(status_response)
                            var status = JSON.parse(status_response).status;

                            if (status == "CREATED_SUBSCRIPTION") {
                                Autience.utils.sendEvent('provider_email_saved', autience_user_details);


                                //go to thankyou page, if it's enabled
                                if (widget.components.emailSubscription.values.thankyou == 'custom') {
                                    console.log('custom redirect')
                                    window.location = widget.components.emailSubscription.values.thankyouUrl
                                    return
                                }
                                //ignore thankyou page if disabled, close the widget
                                if (widget.components.emailSubscription.values.thankyou == 'no') {
                                    console.log('no redirect')
                                    document.getElementById('yeloni-email-form').innerHTML = 'You are now Subscribed! Thank you.'
                                    document.getElementById('yeloni-email-form').style.textAlign = "center"
                                    document.getElementById('yeloni-email-form').style.fontSize = "16px"
                                    setTimeout(function() {
                                        Autience.utils.closeWidget(widget)
                                    }, 3000);
                                    return
                                }


                                //for default thankyou page
                                if (verify == true) {
                                    window.location = yetience.server + '/thankyouVerify.html'
                                    console.log("subscription complete")
                                } else {
                                    window.location = yetience.server + '/thankyou.html'
                                    console.log("subscription complete 2")
                                }

                                // window.location="http://yeloni.com/emails/subscription-thankyou.html"
                                return
                            }

                            document.getElementById(submit_field_id).innerHTML = previous_submit_text

                            if (status == "ALREADY_SUBSCRIBED" || status == "SUBSCRIPTION_ERROR") {
                                document.getElementById(email_error_id).innerHTML = 'Email is already subscribed'
                                document.getElementById(email_error_id).style.display = 'block'
                            }

                            if (status == "SUBSCRIPTION_ERROR") {
                                document.getElementById(email_error_id).innerHTML = 'There was an error during susbcription'
                                document.getElementById(email_error_id).style.display = 'block'
                            }


                        },
                        function() {
                            //error
                            console.log("something went wrong")
                        });


                })

            }


            function validateEmail(email) {
                if (!email || email.length < 2) {
                    return false
                }
                var re = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
                return re.test(email);
            }

            function validateName(name) {
                if (!widget.components.emailSubscription.values.askName) {
                    return true
                }
                if (!name || name.length < 2) {
                    return false
                }

                var r_name = new RegExp(/^[a-zA-Z. ]+$/);
                var ret_reg = r_name.test(name)

                return ret_reg
            }

        })

        if (yetience_callback) {
            yetience_callback()
        }

    }



};

window.defineAutienceSocial = function(yetience_callback) {
    //console.log('injecting social.js')
    if (Autience) {
        //console.log('really injecting social.js')
        Autience.lifecycle.postRender.push(function(widget) {

            Autience.setup.networks.forEach(function(N) {
                //console.log(N)
                bindAutienceShare(N.label, 'autience-network-' + N.label, N.sharing_link, N.sharing_param)
            })


            function bindAutienceShare(network, button_id, share_link, share_param) {

                //console.log('binding ' + network + ' to ' + button_id)

                var Config = {
                    Link: "a.share",
                    Width: 500,
                    Height: 500
                }
                var encoded_url = encodeURIComponent(window.location)

                Autience.utils.idListen(button_id, 'click', PopupHandler)

                function PopupHandler(e) {
                    console.log('clicked on ' + network)


                    console.log('share_link- ' + share_link)
                    console.log('share_param- ' + share_param)

                    e = (e ? e : window.event);
                    var t = (e.target ? e.target : e.srcElement);

                    // popup position
                    var
                        px = Math.floor(((screen.availWidth || 1024) - Config.Width) / 2),
                        py = Math.floor(((screen.availHeight || 700) - Config.Height) / 2);

                    // open popup
                    var popup = window.open(share_link + '?' + share_param + '=' + encoded_url, "social",
                        "width=" + Config.Width + ",height=" + Config.Height +
                        ",left=" + px + ",top=" + py +
                        ",location=0,menubar=0,toolbar=0,status=0,scrollbars=1,resizable=1");
                    if (popup) {
                        popup.focus();
                        if (e.preventDefault) e.preventDefault();
                        e.returnValue = false;
                    }

                    return !!popup;
                }
            }

        })

        if (yetience_callback) {
            yetience_callback()
        }
    }
};
window.defineAutienceRedirect = function(yetience_callback) {
    Autience.lifecycle.postRender.push(function(widget) {

        var component_array = []

        for (var tag in widget.components) {
            component_array.push({
                tag: tag,
                component: widget.components[tag]
            })
        }

        component_array.forEach(function(item) {
            Autience.utils.executeOnClass('autience-redirect-' + item.tag, function(el) {
                console.log('found redirect button ' + item.tag)

                Autience.utils.listen(el, 'click', function() {
                    //console.log('redirect button clicked')
                    //console.log(item.component)
                    var operation = item.component.values.operation
                    var url = null
                    switch (operation) {
                        case 'redirect':
                            url = item.component.values.redirectTo
                            break
                        case 'redirectClicked':
                            url = Autience.current_link
                            break
                    }

                    console.log('redirect to ' + url)
                    switch (item.component.values.redirectOn) {
                        case 'same':

                            Autience.utils.redirect(url)
                            break

                        case 'new':

                            Autience.utils.redirect(url, '_blank')
                            break
                    }

                    Autience.utils.closeWidget(widget)
                })
            })
        })

    })

    if (yetience_callback) {
        yetience_callback()
    }


};
window.defineAutienceChat = function(yetience_callback) {
    if (Autience) {
        Autience.lifecycle.postRender.push(function(widget) {

            Autience.setup.networks.forEach(function(N) {
                bindAutienceChat("zopim")
            })


            function bindAutienceChat(chatProvider) {
                //close popup
                Autience.utils.classListen('autience-open-chat', 'click', function() {
                    if (typeof $zopim != 'undefined') {
                        $zopim.livechat.window.show();
                    } else {
                        console.log('Zopim is not installed')
                    }
                })

            }
        })


        Autience.lifecycle.display.push(function(widget) {
            if (typeof $zopim != 'undefined') {
                //for zopim popup to be shown as "in the popup"
                var yel_body_height = window.innerHeight;
                var yel_body_width = window.innerWidth;
                var yel_zopim_height = 400;
                var yel_zopim_width = 310;
                var yel_popup_offset = 76;
                var chat_wrapper = document.getElementById("yel-chat-wrapper")

                if (chat_wrapper) {
                    var yel_loc = chat_wrapper.getBoundingClientRect();

                    $zopim(function() {
                        //open the chat if it is closed
                        $zopim.livechat.window.show();

                        //change location
                        $zopim.livechat.window.setOffsetHorizontal(yel_body_width - yel_zopim_width - yel_loc.left - 5);
                        $zopim.livechat.window.setOffsetVertical((yel_body_height - yel_zopim_height) - yel_popup_offset);

                        /*var ua = navigator.userAgent.toLowerCase(),
                        platform = navigator.platform.toLowerCase();
                        platformName = ua.match(/ip(?:ad|od|hone)/) ? ‘ios’ : (ua.match(/(?:webos|android)/) || platform.match(/mac|win|linux/) || [‘other’])[0],
                        isMobile = /ios|android|webos/.test(platformName);*/
                        console.log(yel_body_width)
                        if (yel_body_width < 481) {
                            console.log("ot is mobile")
                            $zopim.livechat.window.setOffsetVertical((yel_body_height - yel_zopim_height) - yel_popup_offset);
                        }

                    })
                }



            }
        })

        if (yetience_callback) {
            yetience_callback()
        }
    }


};
window.defineAutienceBack = function(yetience_callback) {

    Autience.lifecycle.render.push(function(widget) {
        // console.log('inside back button code')
        // console.log(widget.trigger)
        console.log('checking for  trigger for back button')
        if (widget.trigger && widget.trigger.trigger == 'back' && !window.location.hash) {
            console.log('inserting  trigger for back button')
            var history_length = window.history.length
            console.log('history length before - ' + history_length)
           
            setTimeout(function() {
                console.log('setting hash using window.location.hash')
                window.location.hash = Autience.utils.randomString(); //

                setTimeout(function() {
                    Autience.hash_set = true
                }, 1000)

                setTimeout(function() {
                    console.log('history length after setting hash using window.location.hash ' + window.history.length)
                        //if history length is still the same that means popup on back button wont work
                    if (history_length == window.history.length) {
                        console.log('changing hash by changing location')
                        var new_location = window.location.protocol + '//' + window.location.host + window.location.pathname + '#' + Autience.utils.randomString() 
                        window.location = new_location

                        setTimeout(function() {
                            console.log('history length after setting hash using window.location ' + window.history.length)
                            if(history_length == window.history.length){
                                if(window.history.pushState){
                                    new_location = window.location.protocol + '//' + window.location.host + window.location.pathname + '#' + Autience.utils.randomString() 
                                    console.log('inserting using window.history.pushState')
                                    window.history.pushState(null, null,new_location)
                                    setTimeout(function() {
                                        console.log('history length after pushState- '+window.history.length)
                                    },1000)
                                }
                                
                            }
                        }, 1000)
                    }
                }, 1000)
            }, 1000)


        } else {
            console.log('no need to insert trigger for back button')
            console.log('hash at this point of time- ' + window.location.hash)
            if (!window.location.hash) {
                console.log('hash is not defined')
            }
        }

    })

    if (yetience_callback) {
        yetience_callback()
    }
}